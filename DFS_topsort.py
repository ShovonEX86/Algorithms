# -*- coding: utf-8 -*-
"""task1A.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EU876MJzxWHyaWhvgTc3BczPSJ3koOmr
"""

input = open('input1a.txt','r')
output = open('output1a.txt','w')

num_courses , lines = tuple(map(int,input.readline().split()))
g = {}

for i in range(1,num_courses+1):
    g[i] = []
for j in range(lines):
    a , b  = tuple(map(int,input.readline().split()))
    g[a].append(b)

visit = {i:False for i in g}
visit2 = {i:False for i in g}
def has_cycle(v, stack):
    visit2[v] = True
    stack.append(v)

    for u in g[v]:
        if not visit2[u]:
            if has_cycle(u,stack):
                return True
        elif u in stack:
            return True

    stack.pop()
    return False

def cycle(g):
    stack = []
    for v in g:
        if not visit2[v]:
            if has_cycle(v,stack):
                return True
    return False

def DFS(g,v,stack):
    visit[v] = True
    for u in g[v]:
        if visit[u]: continue
        DFS(g,u,stack)
    stack.append(v)

def DFS_topsort(g):
    stack = []
    for v in g:
        if not visit[v]:
            DFS(g,v,stack)
    return stack[::-1]
if cycle(g):
    output.write(f"IMPOSSIBLE")
else:
    a = DFS_topsort(g)
    for i in a:
        output.write(f"{i} ")
input.close()
output.close()