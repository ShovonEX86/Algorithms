# -*- coding: utf-8 -*-
"""task02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xEU2v8Wff4bTGFzAAl8SWdq6q_qbpQ_q
"""

import heapq
input = open('input1.txt','r')
output = open('output1.txt','w')

N , M = tuple(map(int,input.readline().split()))

g = {}

for i in range(1,N+1):
    g[i] = []

for _ in range(M):
    n1 , n2, w  = tuple(map(int,input.readline().split()))
    g[n1].append((n2,w))

s = int(input.readline())

def Dijkstra(g,s):
    visited = {i : False for i in range(1,N+1)}
    par = {i : None for i in range(1,N+1)}
    dist = [float('inf')] * (N+1)

    dist[s] = 0
    pq = [(dist[s],s)]

    while len(pq)>0:

        dis , par_n = heapq.heappop(pq)

        for u in g[par_n]:
            if not visited[u[0]]:
                if (dist[par_n] + u[1] < dist[u[0]]) :
                    dist[u[0]] = dist[par_n] + u[1]
                    par[u[0]] = par_n
                    heapq.heappush(pq,(dist[u[0]],u[0]))

            visited[u] = True

    return dist
ans = Dijkstra(g,s)
for i in range(1,len(ans)):
    if ans[i] == float('inf'): output.write(f'-1 ')
    else:output.write(f'{ans[i]} ')

input.close()
output.close()