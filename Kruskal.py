# -*- coding: utf-8 -*-
"""task04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xEU2v8Wff4bTGFzAAl8SWdq6q_qbpQ_q
"""

input = open('input4.txt','r')
output = open('output4.txt','w')

N , M = tuple(map(int,input.readline().split()))

par = [int(i) for i in range(N+1)]
siz = [1]*(N+1)
edges = []

for _ in range(M):
    n1, n2, w = tuple(map(int,input.readline().split()))
    edges.append((n1, n2, w))

def find(r):
	if par[r]==r: return r
	return find(par[r])

def union(u,v):
    if u==v: return
    if siz[u] < siz [v]:
        u ,v = v , u
    par[v] = u
    siz[u] += siz[v]
    for i in range(len(par)):
        if find(i) == u:
            siz[i] = siz[u]

def Kruskal(N,edges):
    edges.sort(key=lambda x: x[2])
    cost = 0
    for u, v, w in edges:
        par_u =find(u)
        par_v = find(v)
        if par_u != par_v:
            union(u,v)
            cost += w
    return cost

output.write(f'{Kruskal(N,edges)}')


input.close()
output.close()

