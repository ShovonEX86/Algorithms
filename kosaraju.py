# -*- coding: utf-8 -*-
"""task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EU876MJzxWHyaWhvgTc3BczPSJ3koOmr
"""

import heapq
input = open('input3.txt','r')
output = open('output3.txt','w')

N , M = tuple(map(int,input.readline().split()))
g = {}
transposed = {}

for i in range(1,N+1):
    g[i] = []
    transposed[i] = []


for j in range(M):
    a , b  = tuple(map(int,input.readline().split()))
    g[a].append(b)

visit = {i:False for i in g}

def DFS(g,v,stack):
    visit[v] = True
    for u in g[v]:
        if visit[u]: continue
        DFS(g,u,stack)
    stack.append(v)

def DFS_topsort(g):
    stack = []
    for v in g:
        if not visit[v]:
            DFS(g,v,stack)
    return stack[::-1]

def transpose(g):
    for i in g:
        for j in g[i]:
            transposed[j].append(i)
    return transposed
transpose(g)
def DFS_in_transposed(v,curr_scc):
    visit[v] = True
    curr_scc.append(v)
    for u in transposed[v]:
        if visit[u] == False:
            DFS_in_transposed(u,curr_scc)
    return curr_scc


def Kosaraju(g,transposed):
    scc_count = 0
    scc_list = []
    stack = DFS_topsort(g)

    for i in visit:
        visit[i] = False

    while len(stack)>0:
        u = stack.pop(0)
        curr_scc = []
        if not visit[u]:
            DFS_in_transposed(u,curr_scc)
            scc_count += 1
            scc_list.append(curr_scc)
    for scc in scc_list:
        output.write(' '.join(map(str, scc))+'\n')




Kosaraju(g,transposed)
input.close()
output.close()